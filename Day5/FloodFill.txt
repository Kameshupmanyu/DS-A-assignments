class Solution {
public:
    bool isValid(int i,int j,vector<vector<int>>& image,vector<vector<bool>>& vis,int el,int m,int n)
    {
        return i<m&&i>=0&&j<n&&j>=0&&(!vis[i][j])&&image[i][j]==el;
    }
    void dfs(vector<vector<int>>& image,vector<vector<bool>>& vis,int i,int j,int el,int nc,int m,int n)
    {
        vis[i][j]=true;
        image[i][j]=nc;
        if(isValid(i,j+1,image,vis,el,m,n))
            dfs(image,vis,i,j+1,el,nc,m,n);
        if(isValid(i+1,j,image,vis,el,m,n))
            dfs(image,vis,i+1,j,el,nc,m,n);
        if(isValid(i,j-1,image,vis,el,m,n))
            dfs(image,vis,i,j-1,el,nc,m,n);
        if(isValid(i-1,j,image,vis,el,m,n))
            dfs(image,vis,i-1,j,el,nc,m,n);
        return;
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int m=image.size();
        int n=image[0].size();
        
        vector<vector<bool>>vis(m,vector<bool>(n,0));
        
        dfs(image,vis,sr,sc,image[sr][sc],newColor,m,n);
        return image;
    }
};